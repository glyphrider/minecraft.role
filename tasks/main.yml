---
- import_tasks: java.yml

- name: create minecraft user
  user:
    name: "{{ MINECRAFT_USER }}"
    home: "{{ INSTALL_ROOT }}"
    create_home: false
    comment: "Minecraft Server Account"
  become: yes

- name: mkdir /opt/minecraft
  file:
    path: "{{ INSTALL_ROOT }}"
    state: directory
  become: yes

- name: copy server.jar to server
  copy:
    src: "server.jar"
    dest: "{{ INSTALL_ROOT }}"
    remote_src: no
  become: yes

- name: change ownership of installation root
  file:
    path: "{{INSTALL_ROOT }}"
    owner: "{{ MINECRAFT_USER }}"
    recurse: yes
  become: yes

- name: server.properties
  template:
    src: server_properties.j2
    dest: "{{ INSTALL_ROOT }}/server.properties"
  become: yes

- name: whitelist.json
  uri:
    url: "https://x2kjkpfk10.execute-api.us-east-2.amazonaws.com/brian/whitelist"
    method: "POST"
    src: "users.json"
    dest: "{{ INSTALL_ROOT }}/whitelist.json"
    remote_src: no
  become: yes

- name: ops.json
  uri:
    url: "https://x2kjkpfk10.execute-api.us-east-2.amazonaws.com/brian/ops"
    method: "POST"
    src: "users.json"
    dest: "{{ INSTALL_ROOT }}/ops.json"
    remote_src: no
  become: yes

- name: check for eula.txt
  stat:
    path: "{{ INSTALL_ROOT }}/eula.txt"
  register: eula

- name: first server run (generates eula.txt)
  command: "java -jar server.jar nogui"
  args:
    chdir: "{{ INSTALL_ROOT }}"
  ignore_errors: yes
  become: yes
  when: not eula.stat.exists

- name: eula.txt
  lineinfile:
    path: "{{ INSTALL_ROOT }}/eula.txt"
    regexp: ^eula=
    line: eula=TRUE
  become: yes
  when: not eula.stat.exists
    
- name: change ownership of installation root
  file:
    path: "{{INSTALL_ROOT }}"
    owner: "{{ MINECRAFT_USER }}"
    group: "{{ MINECRAFT_USER }}"
    recurse: yes
  become: yes

- name: service template
  template:
    src: minecraft_service.j2
    dest: /lib/systemd/system/minecraft.service
  become: yes
  notify: systemd
